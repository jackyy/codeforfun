public class Solution {
    
     public static void main(String []args){
        int[][] grid=new int[][]{
            {1, 2, 3, 4},
            {4, 2, 1, 2},
            {9, 1, 3, 99},
            {5, 2, 99, 1}
        };
        
        Solution s=new Solution();
        System.out.println(s.minPathSum(grid));
     }

    
    public int minPathSum(int[][] grid) {
        if(grid.length==0 || grid[0].length==0)return -1;
        int [][] dst=new int[grid.length][grid[0].length];
        for(int i=0;i<dst.length;i++)
            for(int j=0;j<dst[0].length;j++)
                dst[i][j]=Integer.MAX_VALUE;
                
        minheap heap=new minheap(grid.length*grid[0].length);
        
        addheap(0, 0, 0, grid, heap);
        dst[0][0]=grid[0][0];    
        
        heapItem next=heap.getmin();
        while(next!=null){
            int newdst=grid[next.x][next.y]+dst[next.px][next.py];
            if(newdst<dst[next.x][next.y]){
                dst[next.x][next.y]=newdst;
                if(next.x==(grid.length-1) && next.y==(grid[0].length-1))return dst[next.x][next.y];
                else addheap(next.x,next.y, dst[next.x][next.y], grid, heap);
            }
            next=heap.getmin();
        }
        
        return -1;
    }
    
    void addheap(int x, int y, int dst, int[][]grid, minheap heap){
        if((x+1)<grid.length)heap.add(new heapItem(grid[x+1][y]+dst,x+1, y, x, y));
        if((y+1)<grid[0].length)heap.add(new heapItem(grid[x][y+1]+dst, x, y+1, x, y));
    }
    
    class heapItem{
        public int val;
        public int x;
        public int y;
        public int px;
        public int py;
        public heapItem(int v, int xx, int yy, int pxx, int pyy){
            val=v;
            x=xx;
            y=yy;
            px=pxx;
            py=pyy;
        }
    }
    
    class minheap{
        heapItem[] _items=null;
        int _tail=-1;;
        
        public minheap(int size){
            _items=new heapItem[size];
        }
        
        public void dump(){
            System.out.println("");
            System.out.print("Heap:");
            for(int i=0;i<=_tail;i++){
                System.out.print(" "+_items[i].val+"("+_items[i].x+","+_items[i].y+")("+_items[i].px+","+_items[i].py+")");
            }
            System.out.println("");
        }
        
        public heapItem getmin(){
            if(_tail<0)return null;
            swap(0, _tail);
            _tail--;
            reheap_down(0);
            return _items[_tail+1];
        }
        
        public void add(heapItem item){
            _tail++;
            _items[_tail]=item;
            reheap_up(_tail);
        }
        
        void reheap_up(int i){
            if(i==0)return;
            int p=(i-1)/2;
            if(_items[p].val>_items[i].val){
                swap(p, i);
            }
            reheap_up(p);
        }
        
        void reheap_down(int i){
            if(i>_tail)return;
            int left=i*2+1;
            int right=i*2+2;
            if(left>_tail)return;
            int min=_items[left].val;
            int c=left;
            if(right<=_tail && _items[right].val<min){
                min=_items[right].val;
                c=right;
            }
            
            if(_items[i].val>min){
                swap(i, c);
                reheap_down(c);
            }
        }
        
        void swap(int i, int j){
            heapItem tmp=_items[i];
            _items[i]=_items[j];
            _items[j]=tmp;
        }
    }
}
