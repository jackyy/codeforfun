import java.util.*;
import java.math.*;

public class Solution {
    public static void main(String []args){
    
        int A[]=new int[]{1};
        int B[]=new int[]{1};
        
        Solution s=new Solution(); 
        System.out.println(s.FindKth(A, B, (A.length+B.length)/2-1));
        System.out.println(s.FindKth(A, B, (A.length+B.length)/2));
        System.out.println(s.findMedianSortedArrays(A, B));
    }
     
    public double findMedianSortedArrays(int A[], int B[]) {
        if(A.length==0){
            if((B.length % 2)==1){
                return B[B.length/2];
            }else{
                return (B[B.length/2-1]+B[B.length/2])/2.0;
            }
        }
        
        if(B.length==0){
            if((A.length % 2)==1){
                return A[A.length/2];
            }else{
                return (A[A.length/2-1]+A[A.length/2])/2.0;
            }
        }
        
        int mm=A.length+B.length;
        if(mm%2==1){
            return (double)FindKth(A, B, mm/2);
        }else{
            return (FindKth(A, B, mm/2-1)+FindKth(A, B, mm/2))/2.0;
        }
    }
    
    public int FindKth(int A[], int B[], int k){
        if(k>=(A.length+B.length))return -1;
        int ret=_findkth(0, A.length-1, A, B, k);
        if(ret>0)return ret;
        return _findkth(0, B.length-1, B, A, k);
    }
    
    int _findkth(int sa, int ea, int[] A, int[] B, int k){
        // assume k > A.length/2 and k > B.length/2
        int ma= Math.min((ea+sa)/2, k);
        int cb=k-ma;
        if(cb>=B.length){
            cb=B.length;
            ma=k-cb;
        }
        
        if(sa>=ea){
            if ( (cb==0 || A[ma]>=B[cb-1]) && (cb==B.length || A[ma]<=B[cb]))
                return A[ma];
            else
                return -1;
        }else{        
            if(cb!=0 && A[ma]<B[cb-1]){
                return _findkth(ma+1, ea, A, B, k);
            }else if( cb>=B.length || A[ma]<=B[cb]){
                return A[ma];
            }else{
                return _findkth(sa, ma, A, B, k);
            }
        }
    }
}
