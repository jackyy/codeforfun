import java.util.*;

public class HelloWorld{

     public static void main(String []args){
         Solution s=new Solution();
         char[][] input=new char[][]{
             {'1','1','1','0'},
             {'1','0','0','1'},
             {'0','1','1','1'},
             {'1','1','1','1'}};
             
             System.out.println(s.maximalRectangle(input));
     }
}

class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix==null || matrix.length==0 || matrix[0].length==0)return 0;
        int[] h=new int[matrix[0].length];
        int max=0;
        
        for(int i=0;i<matrix.length;i++){
            Stack stack=new Stack();
            
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j]=='1')h[j]=h[j]+1;
                else h[j]=0;
                
                if(stack.empty() || h[j]>h[(Integer)stack.peek()])stack.push(j);
                else{
                    while(!stack.empty() && h[(Integer)stack.peek()]>h[j]){
                        int curr=(Integer)stack.pop();
                        int left=-1;
                        if(!stack.empty())left=(Integer)stack.peek();
                        int area=(j-left-1)*h[curr];
                        if(area>max){
                            max=area;
                        }
                    }
                    stack.push(j);
                }                
            }
            
            while(!stack.empty()){
                int curr=(Integer)stack.pop();
                int left=-1;
                if(!stack.empty())left=(Integer)stack.peek();
                int area=(matrix[0].length-left-1)*h[curr];
                if(area>max){
                    max=area;
                }
            }
        }
        return max;
    }
}
